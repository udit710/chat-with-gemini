"use strict";
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirestoreStore = void 0;
const express_session_1 = require("express-session");
class FirestoreStore extends express_session_1.Store {
    constructor(options) {
        super();
        this.get = (sid, callback) => {
            this.db
                .collection(this.kind)
                .doc(sid)
                .get()
                .then(doc => {
                if (!doc.exists) {
                    return callback();
                }
                try {
                    const result = JSON.parse(doc.data().data);
                    return callback(null, result);
                }
                catch (err) {
                    return callback(err);
                }
            }, callback);
        };
        this.set = (sid, session, callback) => {
            callback = callback || (() => { });
            let sessJson;
            try {
                sessJson = JSON.stringify(session);
            }
            catch (err) {
                return callback(err);
            }
            this.db
                .collection(this.kind)
                .doc(sid)
                .set({ data: sessJson })
                .then(() => {
                callback();
            });
        };
        this.destroy = (sid, callback) => {
            callback = callback || (() => { });
            this.db
                .collection(this.kind)
                .doc(sid)
                .delete()
                .then(() => callback(), callback);
        };
        this.db = options.dataset;
        if (!this.db) {
            throw new Error('No dataset provided to Firestore Session.');
        }
        this.kind = options.kind || 'Session';
    }
}
exports.FirestoreStore = FirestoreStore;
//# sourceMappingURL=index.js.map